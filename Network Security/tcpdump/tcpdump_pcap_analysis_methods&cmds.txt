===============================
Network Packet Analysis Notes
Tool: tcpdump
===============================

🔹 Interface Basics
----------------------------------------------------------------------------------------------------------------


$tcpdump -D
    # List all network interfaces.

$tcpdump -i 1
$tcpdump -i enp0s3
    # Capture packets on a specific interface.

$tcpdump -i lo -X
$tcpdump -i lo -A
    # Capture from loopback with hex (-X) or ASCII (-A) payload display.

--------------------------------------------------------------------------------------------------------------




🔹 Useful Capture Filters
--------------------------------------------------------------------------------------------------------------
$tcpdump -i eth0 -n
    # Capture without resolving hostnames.

$tcpdump -i eth0 -n host example.com
$tcpdump -i eth0 -n src 10.11.2.3
$tcpdump -i eth0 -n dst 132.3.3.88
    # Filter by host, source, or destination.

--------------------------------------------------------------------------------------------------------------

$tcpdump -i eth0 -n net 10.0.1.0/24
$tcpdump -i eth0 -n src net 10.0.1.0/24
$tcpdump -i eth0 -n dst net 10.0.1.0/24
    # Filter packets for a whole subnet.

📌 Direction Summary
--------------------------------------------------------------------------------------------------------------
dst net 10.0.1.0/24    # Incoming traffic
src net 10.0.1.0/24    # Outgoing traffic
net 10.0.1.0/24        # Both directions
--------------------------------------------------------------------------------------------------------------
$tcpdump -i eth0 -n port 80
$tcpdump -i eth0 -n src port 21
$tcpdump -i eth0 -n dst port 21
    # Filter by TCP/UDP port.
--------------------------------------------------------------------------------------------------------------


🔹 Logical Filters
---------------------------------------------------------------------------------------------------------------
$tcpdump -i eth0 -n src 10.12.0.1 and dst port 3356
$tcpdump -i eth0 -n 'src 10.12.0.1 and not port 22'
$tcpdump -i eth0 -n 'src 10.12.0.1 and dst 43.67.76.16 and not (port 22 or port 443)'
    # Combine filters with AND, OR, NOT.

$tcpdump -i 1 -n icmp
    # Capture ICMP packets (ping, traceroute).

$man tcpdump | less
    # View tcpdump help and options.
------------------------------------------------------------------------------------------------------------------------------


📝 Save and Replay PCAPs
-----------------------------------------------------------------------------------------------------------------------

$tcpdump -i 1 -n -w capture.pcap
    # Save packets to file.

$tcpdump -n -r capture.pcap
    # Read packets from file.

$tcpdump -n -r capture.pcap icmp
$tcpdump -n -r capture.pcap tcp
    # Read file with filters.

----------------------------------------------------------------------------------------------------------------------





===============================
PCAP Analysis Methods with tcpdump
===============================


--------------------------------------------------------------------------------------------------------------
📦 Method 1: Real PCAP Analysis (HTTP Focus)
--------------------------------------------------------------------------------------------------------------

Note: Avoid using "-n" when analyzing HTTP traffic, so domain names are visible.

→ Count HTTP packets (no output, just number):

$ tcpdump -r 2024-04-18.pcap -tt port 80 --count

→ Extract HTTP GET/POST traffic to/from host 10.xx.xx.xx:

$ tcpdump -r 2021-09-14.pcap -tt port http and host 10.xx.xx.xx | grep -E "GET|POST"

→ Search for specific file names in raw payloads:

$ tcpdump -r 2021-09-14.pcap -tt | grep "audiodg.exe"

→ Display file-related data in ASCII (500 lines after match):

$ tcpdump -r 2021-09-14.pcap -tt -A | grep "audiodg.exe" -A 500 | less



--------------------------------------------------------------------------------------------------------------
📊 Method 2: Advanced PCAP Analysis (All Protocols)
---------------------------------------------------------------------------------------------------------------

→ Basic packet count:

$ tcpdump -r file.pcap --count

→ List all TCP packets with timestamps:

$ tcpdump -tt -r file.pcap -n tcp


🎯 Find Most Active IPs (Talkers)
----------------------------------
➤ Extract source IPs:

$ tcpdump -tt -r file.pcap -n tcp | cut -d " " -f 3 | cut -d "." -f 1-4 | sort | uniq -c | sort -nr

➤ Extract destination IPs:

$tcpdump -tt -r file.pcap -n tcp | cut -d " " -f 5 | cut -d "." -f 1-4 | sort | uniq -c | sort -nr


🔁 Analyze Communication Between Two IPs
-----------------------------------------

➤ Count packets between suspected source and destination:

$ tcpdump -r file.pcap src host 10.xx.xx.xx and dst host 85.xx.xx.xx --count


🔎 Identify Common Ports Used
------------------------------

➤ From 85.xx.xx.xx to 10.xx.xx.xx.xx:

$ tcpdump -r file.pcap -n tcp and src host 10.xx.xx.xx and dst host 85.xx.xx.xx | cut -d " " -f 3 | cut -d "." -f 5 | sort | uniq -c | sort -nr

➤ Reverse (from 85.xx.xx.xx to 10.xx.xx.xx.xx):

$ tcpdump -r file.pcap -n tcp and dst host 10.xx.xx.xx and src host 85.xx.xx.xx | cut -d " " -f 3 | cut -d "." -f 5 | sort | uniq -c | sort -nr


🌐 Detect HTTP Requests (if unencrypted)
-----------------------------------------

➤ Look for GET or POST requests:

tcpdump -r file.pcap src host 10.xx.xx.xx.xx and dst host 85.xx.xx.xx -A | grep -E "GET|POST"


🔤 Read Payloads in ASCII
--------------------------

$ tcpdump -r file.pcap host 10.xx.xx.xx.xx and host 85.xx.xx.xx -A


🔐 Search for Sensitive Data (e.g., credentials)
------------------------------------------------

➤ Basic credential search:

$ tcpdump -r file.pcap host 85.xx.xx.xx -A | grep -i "pass\|user\|login"

➤ Exclude common headers (like User-Agent):

$ tcpdump -r file.pcap host 85.xx.xx.xx -A | grep -i "pass\|user\|login" | grep -v "User-Agent"


📁 Search for File Transfers or Names
--------------------------------------

$ tcpdump -r file.pcap host 85.xx.xx.xx -A | grep -i "filename"


🌍 Find Domains (via DNS Queries)
----------------------------------
➤ Look for suspicious domains (e.g., t.me):

$ tcpdump -r file.pcap | grep "t.me"

➤ Resolve domains to IPs:

$ tcpdump -r file.pcap host t.me -n


🧩 Detect Suspicious File Types (DLLs, EXEs)
--------------------------------------------

$ tcpdump -r file.pcap | grep dll

➤ Read content near DLL references:

$ tcpdump -r file.pcap -A | grep dll -A 50 | less













--------------------------------------------------------------------------------------------------------------

IST Time Conversion – Bash and Python:
--------------------------------------------------------------------------------------------------------------


Bash Version (for -tttt Output)

bash


tcpdump -tttt -r file.pcap | while read -r line; do
  datetime=$(echo "$line" | awk '{print $1, $2}')
  rest=$(echo "$line" | cut -d' ' -f3-)
  timestamp_12hr=$(date -d "${datetime%.*}" +"%Y-%m-%d %I:%M:%S %p")
  echo "$timestamp_12hr $rest"
done

This converts the full human-readable timestamp to 12-hour format (AM/PM) in Bash.

--------------------------------------------------------------------------------------------------------------


Python Version for -tttt Output (Human-Readable Time)


tcpdump -tttt -r file.pcap | python3 -c "
import sys, datetime
[print(datetime.datetime.strptime(l[:26], '%Y-%m-%d %H:%M:%S.%f').strftime('%Y-%m-%d %I:%M:%S %p') + l[26:]) for l in sys.stdin]
"

This takes -tttt output and converts it to 12-hour AM/PM time using Python.

--------------------------------------------------------------------------------------------------------------


Python Version for -tt Output (Epoch Time)

tcpdump -tt -r file.pcap | python3 -c "
import sys, datetime
for line in sys.stdin:
    parts = line.strip().split(' ', 1)
    try:
        ts = float(parts[0])
        dt = datetime.datetime.fromtimestamp(ts)
        print(dt.strftime('%Y-%m-%d %I:%M:%S %p'), parts[1])
    except:
        print(line.strip())
"


This converts UNIX timestamps from -tt output into human-readable 12-hour time.


--------------------------------------------------------------------------------------------------------------



Timestamp Format Summary
----------------------------------

Flag: -t
Meaning: No timestamp
Example Output:
IP 10.0.0.1 > 8.8.8.8: ...

Flag: -tt
Meaning: Raw UNIX timestamp (epoch)
Example Output:
1713403340.123456

Flag: -ttt
Meaning: Time since previous packet (delta)
Example Output:
0.000014

Flag: -tttt
Meaning: Full readable datetime with microseconds
Example Output:
2024-06-12 14:21:04.123456


